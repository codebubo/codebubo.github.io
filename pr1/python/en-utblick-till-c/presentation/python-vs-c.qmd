---
title: En utblick till C
from: markdown+emoji
title-slide-attributes:
  data-background-image: https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/C_Programming_Language.svg/695px-C_Programming_Language.svg.png
  data-background-opacity: "0.75"
  data-background-color: "black"
  data-title-color: "black"
author: "Nikodemus Karlsson"
format:
  revealjs:
    code-block-height: 490px
    mermaid: 
      theme: dark
    theme: dark
    transition: slide
    background-transition: slide
    slide-number: true
    controls: true
    controls-layout: edges
    date-format: "DD MMM YYYY"
    css: style.css
	
execute: 
  echo: false
---

## Dagens mål

* Att känna till några övergripande skillnader mellan Python och C
* Att känna till några variabeltyper i C
* Att skriva ett program i C som hanterar en inmatning och en utmatning
* Att hantera enkla villkor i C


## En stor skillnad mellan Python och C

:::{.v-space}
:::

:::{.blue-bg-small-padding }
Python är ett **interpreterat** språk. Det för att köra ett Pythonprogram
krävs att Python är installerat på datorn.

C är ett **kompilerat** språk. Programmet körs direkt av operativsystemet (t ex
Windows). 

Pythonprogram har ett extra "lager" mellan program och operativsystem. Det gör
att de körs långsammare.
:::

## Variabler i C

I Python behöver vi ofta inte tänka så mycket på datatypen som en variabel har.

```python
my_number = 42
my_other_number = 3.14
my_number = 42.1 # Funkar fint
```

:::{.double-v-space}
:::

I C så måste datatypen specificeras vid deklarationen, därefter kan den inte
ändras.

```C
int my_number;
my_number = 42;
float my_other_number;
my_other_number = 3.14;

my_number = 42.1; // Otillåtet, eftersom 42.1 är inte ett heltal

```

## Utmatning i C

I C används ofta funktionen `printf` för textutmatning. Exempel:

```C
int my_int = 42;
float my_float = 3.14;
printf("Mitt heltal är: %d\n", my_int);
printf("Mitt flyttal är: %f\n", my_float);
```

:::{.double-v-space}
:::

Tecknen `%d` och `%f` är *formatangivare*, som anger vilken typ av variabel som
ska skrivas ut. Vi måste även lägga till radframmatning manuellt i
`printf`-satsen i form av `\n` (detta fungerar även i Python).

## Ett C-program

Ett Pythonprogram kan bestå av en enda rad, t ex `print("Hello, world")`. I C,
däremot, måste man inkludera vilka bibliotek som ska ingå i programmet och
dessutom deklarera en funktion som programmet startar i. Den funktion som ett
program startar i är alltid `main`.


```C
#include <stdio.h> // I detta bibliotek finns t ex `printf`

// Här deklareras main, som är av typen `int`,
// som inte tar någon parameter:
int main(void) {
	float pi = 3.14;
	printf("Hello, my favourite number is %f\n", pi);
	return 0;
}
```

## Inmatning

Inmatning av data kan ske med funktionen `scanf`. Även den använder
formatangivare för att avgöra vilken typ av data som förväntas.

```C
// In function main
int a;
float b;
printf("Enter two numbers separated by a space -> ");
scanf("%d %f", &a, &b);
printf("You entered %d and %f\n", a, b);
// ... Function continous
```

Tecknet `&`, en *ampersand*, används här för att skicka variablerna `a` och `b`
som *referenser* till `scanf`. Det betyder att `scanf` får mandat att ändra
dem, alltså tilldela dem värden.

## Division

I Python används `/` för division och `//` för heltalsdivision. I C så ger
division (`/`) med heltal ett heltal, och division med flyttal ett flyttal.

```C
int a = 15;
int b = 5;
int c = 6;
printf("Heltal: %d / %d = %d\n", a, b, a / b);
printf("Heltal: %d / %d = %d\n", a, c, a / c);
printf("Flyttal: %d / %d = %f\n", a, c, (float)a / (float)c);
```

::::{.columns}

:::{.column width="36%"}


:::{.code-output-frame}

```
Heltal: 15 / 5 = 3
Heltal: 15 / 6 = 2
Flyttal: 15 / 6 = 2.500000
```
:::
:::

:::{.column width="10%"}
:::

:::{.column width="54%"}
Formatangivaren måste matcha variabeltypen.
Det som görs på rad 6 kallas för en *typkonver-tering*.
:::
::::

## Villkor


Precis som i Python finns `if`-satser för att styra programmet med hjälp av
jämförelser.

```C
int a = 10, b = 20;
if (a > b) {
	printf("a > b");
} else if (a < b) {
	printf("b > a");
}
  else {
	printf("a är lika med b");
}
```

I Python så används radindrag för att markera vad som hör till `if`-satsen,
i C används "måsvingar" (braces). Radindragen är enbart estetiska.

## Lite matematik

I biblioteket `math.h` finns många matematiska funktioner och konstanter
definierade.

```C
#include <math.h>
#include <stdio.h>

int main(void) {
	int a = 2, b = 3;
	int c = pow(a, b);   // 8
	float d = sqrt(a);   // 1.414214
	float e = sin(M_PI); // 0.000000
	int r = b % a;       // 1 (resten vid heltalsdivision)
	return 0;
}
```


En lista på ingående funktioner och konstanter finns
[här](https://en.wikibooks.org/wiki/C_Programming/math.h).

## Det finns mycket mer ... {visibility="hidden"}

* Loopar
* Funktioner
* Arrayer
* Strängar
* Egendefinierade datatyper
* Läsning och skrivning till fil
* Pekare och manuell minneshantering

En del av detta kommer att tas upp, annat inte!

## Loopar

Det finns tre varianter loopar i C:

* `while`-loopar
* `do while`-loopar
* `for`-loopar

Till alla loopar finns styrsatsatserna `break` och `continue`, vilka verkar på
på liknande sätt som i Python.

## `while`-loopen

Strukturmässigt så fungerar den på samma sätt som i Python, koden i loopen
körs tills så länge ett villkor uppfylls.

Exempel:

```C
int i = 0;

// Skriver ut 0 1 2 3 4
while (i < 5) {
	printf("%d ", i);
	i++; // Ökar i med 1
}
```

Även här ser vi "måsvingarna" runt det som ska utföras. Vi ser också
inkrementeringsoperatorn, `++`, den ökar talet i fråga med 1.


## `do while`-loopen

Denna loop har ingen direkt motsvarighet i Python, men fungerar ungefär som
`while`-loopen. Medan `while`-loopen testar villkoret i början av
varje varv, kommer `do while`-loopen att testa det i slutet.

```C
int i = 0;
do {
	printf("%d ", i);
	i++;
} while (i < 5);
```

Det innebär att koden alltid kommer att köras minst en gång.

## `for`-loopen

I Python kan en `for`-loop användas för att iterera över en lista, men den
egenskapen har inte `for`-loopar i C.

```C
int sum = 0;
for (int i = 0; i < 5; i++) {
  sum += i;
  printf("i: %d\t Summa: %2d\n", i, sum);
}
```

::::{.columns}

:::{.column width="25%"}

:::{.code-output-frame}

```
i: 0	Summa:  0
i: 1	Summa:  1
i: 2	Summa:  3
i: 3	Summa:  6
i: 4	Summa: 10
```
:::

:::
::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="65%"}
Loopvariabeln i C är typiskt ett heltal (`int`), till skillnad från i Python där
den kan vara vilket objekt som helst från en itererbar sekvens. `for`-loopen
används ofta för att iterera över index i arrayer.
:::

::::

## Arrayer

* I Python: listor. Elementen kan vara av olika datatyper.

* I C: Arrayer. Elementen måste vara av samma datatyp. Måste dessutom ange
storlek i deklarationen.

Exempel på deklaration av array:

```C
int arr[5] = {0, 1, 2, 3, 4}; // Valfri initiering
arr[0] = 42;
for (int i = 0; i < 5; i++) {
	printf("%d ", arr[i]);
} 
```

::::{.columns}

:::{.column width="25%"}

:::{.code-output-frame}
```
42 1 2 3 4
```
:::

:::

:::{.column width="10%"}
:::

:::{.column width="65%"}
Arrayen manipuleras med sina index, det finns t ex inget `append`.
:::
::::

## Funktioner i C

* Funktioner i C används för att organisera kod och återanvända logik,
precis som i Python.

* Två viktiga skillnader mot Python:
	- Funktionen måste **deklareras** innan den anropas i koden.
	- Man måste ange **vilken datatyp** som funktionen returnerar (eller
	`void` om inget returneras).
* I **funktionsdefinitionen** finns koden för vad funktionen gör.

## Exempel på funktioner


```C
#include <stdio.h>

void say_hi();         // Funktionerna
int add(int a, int b); // deklareras

int main(void) {
	say_hi();                    // Funktionerna
	int s = add(2, 3);           // anropas
	printf("Summan är %d\n", s); // Returvärdet används
	return 0;
}

void say_hi(void) {        // Implementering av say_hi
	printf("Hi!\n");       // Inget returvärde
}

int add(int a, int b) {    // Implementering av add
	int sum = a + b;
	return sum;            // Returnerar ett värde
}
```

::::{.columns}

:::{.column width="25%"}

:::{.code-output-frame}
```
Hi!
Summan är 5
```
:::
::::
:::

## Strängar

I C så finns ingen strängdatatyp, utan en sträng är en `array` av datatypen
`char`. 

```C
char str[13] = "Hello, world"; // Strängdeklaration
printf("%s\n", str);           // Utskrift av sträng
// str = "C rules!\n";         // Otillåtet!
```

Att **ändra** en sträng genom en tilldelning, som i rad 3 ovan, är inte tillåtet
i C. Istället så kan funktionen `strcpy` användas.

```C
strcpy(str, "C rules!\n"); // Nu är str ändrad
```

Strängen får inte överskrida 12 tecken plus nollterminatorn `'\0'`.

`strcpy` finns i `string.h`, som alltså måste inkluderas.

## Strängar i funktioner

```C
#include <stdio.h>
#include <string.h> // För strcpy

void greet(char name[]) { // Notera parametern för strängen!
    printf("Hej, %s!\n", name);
}

int main(void) {
    char my_name[10] = "Anna"; // Initial tilldelning
    strcpy(my_name, "Kalle");  // Kopierar ny sträng
    greet(my_name);
    return 0;
}
```

::::{.columns}

:::{.column width="16%"}
::::{.code-output-frame}
```
Hej, Kalle!
```
::::
:::

:::{.column width="4%"}
:::

:::{.column width="80%"}

Strängen tas emot som parameter, och funktionen definieras direkt utan separat
deklaration.
