---
title: "Binärsökning"
format:
  html:
    fontsize: 1em
    css: style.css
---

# Binärsökning i Python

## Beskrivning av algoritmen

1. **Förstå problemet**: Binärsökning är en effektiv algoritm för att hitta ett
specifikt element i en sorterad lista. Den fungerar genom att kontinuerligt
dela listan i hälften tills det sökta elementet hittas eller tills det inte
finns några element kvar att söka igenom.

2. **Identifiera indata**: Funktionen behöver fyra indata: en sorterad lista,
ett sökt tal och två index som representerar den undre och övre gränsen för
sökningen.

3. **Beräkna mitten**: För varje sökning, beräkna mitten av listan (eller den
aktuella delen av listan) genom att addera det undre och övre indexet och dela
med två.

4. **Jämför mitten med målet**: Kontrollera om det sökta talet är lika med,
mindre än eller större än elementet i mitten av listan. Om det är lika,
returnera index för mitten av den aktuella delen av listan.

5. **Uppdatera gränserna**: Om det sökta talet är mindre än elementet i mitten,
uppdatera det övre indexet till att vara ett mindre än mittenindex. Om det sökta
talet är större, uppdatera det undre indexet till att vara ett större än
mittenindex.

6. **Upprepa sökningen med den mindre listan**, dvs gå tillbaka till punkt 3.
Om det övre indexet är ett tal som är mindre än det undre indexet finns inte
talet i listan; returnera då `None`.


## Exempel

Här är en lista med tal. Låt oss söka efter ett tal med hjälp av algoritmen.

```
  Tal: 2  4  6  8  10 12 14 16 18 20
       |  |  |  |  |  |  |  |  |  |
Index: 0  1  2  3  4  5  6  7  8  9
```

### Fall 1: Söker efter talet `14` som finns i listan

1. Först beräknar vi mitten av listan. I det här fallet är mittenindexet `4`
(värdet `10`).

```
        2 4 6 8 [10] 12 14 16 18 20
```

2. Eftersom `14` är större än `10`, fortsätter vi att söka i den högra halvan av listan. Det undre index sätts till 1 mer än mittenindex (`4 + 1 = 5`) och det
övre indexet står kvar (`9`).

```
        12 14 16 18 20
```

3. Vi beräknar mitten av den nya listan, vilket är index `7` (värdet `16`).

```
        12 14 [16] 18 20
```

4. Eftersom `14` är mindre än `16`, fortsätter vi att söka i den vänstra halvan
av den kvarvarande listan. Det undre indexet ändras då inte (`5`) och det övre
indexet blir 1 mindre än mittenindex (`7 - 1 = 6`)

```
        12 14
```

5. Mitten på denna lista är index `5` (värdet `12`).

6. Eftersom `14` är mindre än `12` så fortsätter sökningen till höger om mitten
i den ytterligare reducerade listan. Det undre indexet blir 1 mer än
mittenindexet (`5 + 1 = 6`) och det övre indexet står kvar (`6`).

7.  Eftersom det sökta värdet finns på mittenindexet så returnerar funktionen
detta index.

### Fall 2: Söker efter talet `11` som inte finns i listan

1. Först beräknar vi mitten av listan. I det här fallet är mittenindexet `4`
(värdet `12`).

```
        2 4 6 8 [10] 12 14 16 18 20
```

2. Eftersom `11` är större än `10`, fortsätter vi att söka i den högra halvan
av listan. Undre index: `5` (mittenindex + 1). Övre index: `9` (tidigare
slutindex).

```
        12 14 16 18 20
```

3. Vi beräknar mitten av den nya listan, vilket är index `7` (värdet `16`).

```
        12 14 [16] 18 20
```

4. Eftersom `11` är mindre än `16`, fortsätter vi att söka i den vänstra halvan
av listan. Undre index: `5` (tidigare startindex), övre index: `6`
(mittenindex - 1).

```
        12 14
```

5. Vi beräknar mitten av den nya listan, vilket är index `5` (värdet `12`).

```
        [12] 14
```

6. Eftersom `11` är mindre än `12`, fortsätter vi att söka i den vänstra halvan
av listan. Då sökningen ska ske till vänster ska det lägre indexet (`5`) stå
kvar och det övre indexet ska vara 1 under mittenindex (`5 - 1 = 4`). Det gör
att **det övre indexet är lägre än det undre**. När det läget är nått så har
algoritmen visat att det sökta talet inte finns i listan.

## Algoritmen i pseudokod

```
def bin_search(lst, item, lower_i, upper_i):
    # lst är den sorterade listan som sökningen sker i
    # item är det som söks
    # lower_i är det index där sökningen börjar
    # upper_i är det index där sökningen slutar
    
    # LOOPA under villkoret upper_i >= lower_i:
        # SKAPA en variabel mid_i, som utgör indexet i mitten
        # (avrundat nedåt). Använd heltalsdivision för denna beräkning.

        # OM talet på indexet mid_i är det sökta talet
            # returnera mid_i.
        
        # ANNARS OM talet på indexet mid_i är större än item
            # ändra upper_i till mid_i - 1 (vänster del av lista ska sökas)
        
        # ANNARS, ändra lower_i till mid_i + 1 (höger del av lista ska sökas)
    
    # Returnera None (talet finns inte i listan)
```


```{python}
#| echo: false
def bin_search(lst, item, lower_i, upper_i):
    n = 0
    while upper_i >= lower_i:
        print(f"Söker efter talet {item} i listan {lst[lower_i:upper_i+1]}")
        n += 1
        mid = (lower_i + upper_i) // 2
        if lst[mid] == item:
            return mid, n
        elif lst[mid] > item:
            upper_i = mid - 1
        else:
            lower_i = mid + 1
    return None, n

```

## Uppgifter

### Uppgift 1

Skapa funktionen `bin_search` enligt pseudokoden ovan. Testa den med några olika
listor. Exempel på testprogram till funktionen:

```python
lst = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

val_1 = 12 # Ett värde som finns i listan
val_2 = 25 # Ett värde som saknas i listan

result_1 = bin_search(lst, val_1, lower_i=0, upper_i=len(lst)-1)
result_2 = bin_search(lst, val_2, lower_i=0, upper_i=len(lst)-1)

print(result_1) # 5 (dvs värdet 12 finns på index 5)
print(result_2) # None (dvs värdet 5 saknas i listan)
```


### Uppgift 2

Utveckla programmet så att det skriver ut i vilken partition av listan som
genomsöks och antalet sökningar som gjorts. Exempel på utmatning:

```{python}
#| echo: false
lst = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
val_1 = 12
val_2 = 25
result_1, num = bin_search(lst, val_1, lower_i=0, upper_i=len(lst)-1)
print(f"Talet {val_1} finns på index {result_1}, hittades efter {num} sökningar")
print()
result_2, num = bin_search(lst, val_2, lower_i=0, upper_i=len(lst)-1)
if result_2 != None:
    print(f"Talet {val_2} finns på index {result_2}")
else:
    print (f"Talet {val_2} saknas i listan, konstaterades efter {num} sökningar")
```


### Uppgift 3

Skapa en (sorterad) lista med $1\,000$ element med spridda heltalsvärden mellan
$1$ och $2\,000$. Ta reda på med hjälp av funktionen hur många sökningar det

a. maximalt verkar vara tvunget att göras
b. i genomsnitt görs

för att hitta ett tal som finns i listan alternativt utesluta förekomsten av
det? (Här bör du söka efter vart och ett av alla tal mellan $1$ och $2\,000$
för att få ett tillförlitligt resultat; vissa tal kommer att hittas medan andra
naturligtvis saknas i listan.)

Gör sedan om samma undesökning med en lista på $10\,000$ element (med spridda
heltalsvärden mellan 1 och $20\,000$). Kommentera resultatet (antalet element
har ökat med en faktor 10, men med vilken faktor har det genomsnittliga antalet
sökningar förändrats?).

Tips: En lista `lst` kan sorteras med hjälp av metoden `sort` enligt
`lst.sort()`. Det går alltså att skapa en lista med slumpmässiga heltal och
därefter sortera den. 