---
title: "Octave: Funktioner, villkor och loopar"
format:
  html:
    fontsize: 1em
    css: style.css
execute: 
  echo: false
---

# Funktioner, villkor och loopar

## Teori

Se kap. 2 i dokumentet [Teori och övningar i programmet Octave](https://eu2.contabostorage.com/af70e3b52036469c80229e6ec67d4d95:nika-assets/docs/linalg/ovningar-i-octave-kap-0-4.pdf)

## Övningar

### Övning 201

Skapa en anonym funktion som adderar två tal med varandra och returnerar
resultatet. Funktionen ska ges handtaget `add`.

:::{.callout-tip collapse="true" icon="false" title="Lösningsförslag övning 201"}

Övningen kan antingen göras i *Command Window* eller genom att skapa en fil
i Octave.

```octave
# Koden sparas under valfritt filnamn

add = @(a, b) a + b;
add(2, 3) # Skriver ut 5
```
:::

### Övning 202

Skapa en anonym funktion som parvis multiplicerar talen i två vektorer med
varandra. Funktionen ska ges handtaget `elementmul`.

Körningsexempel:

```
octave:1> elementmul([1 2 3], [4 5 6])
ans = 4 10 18
```

:::{.callout-tip collapse="true" icon="false" title="Lösningsförslag övning 202"}

```octave
# Koden sparas under valfritt filnamn

elementmul = @(u, v) u .* v;
elementmul([1 2 3], [4 5 6])
```
:::

### Övning 203

Skapa en anonym funktion som beräknar logaritmen på ett tal $x$ i en valfri
bas $n$. Funktionen ska tilldelas handtaget `logn`. Funktionen ska kunna ta
emot såväl enstaka tal som en vektor med tal, och returnera logaritmen för
respektive tal som en vektor.

Körningsexempel:

```
octave:2> logn(9, 3) # Beräknar logaritmen av 9 i basen 3
ans = 2
octave:3> logn([1 3 9 27 81], 3)
ans =

   0   1   2   3   4
```

:::{.callout-tip collapse="true" icon="false" title="Lösningsförslag övning 203"}

Vi utgår från följande sätt att lösa ekvationen $n^y = x$ med avseende på $y$:

$$
\begin{matrix}
n^y &=& x &\Leftrightarrow& y &=& \log_n x \\[5mm]
n^y &=& x &\Leftrightarrow& y &=& \frac{\log{x}}{\log{n}}
\end{matrix}
\hspace{5mm} \Rightarrow \log_n{x} = \frac{\log{x}}{\log{n}}
$$

där `log` är logaritmen med en godtycklig bas (i Octave ger funktionen `log`
logaritmen givet basen $e$).

Funktionen kan då kodas

```octave
# Koden sparas under valfritt filnamn

logn = @(x, n) log(x) ./ log(n);
```
:::

### Övning 204

Skapa en namngiven funktion `dotmul` i en separat fil. Funktionen ska parvis
multiplicera komponenterna i två vektorer och returnera summan av produkterna.
(Denna typ av multiplikation kallas för skalärmultiplikation och är en viktig
komponent i den linjära algebran.)

Körningsexempel:

```
octave:4> dotmul([1 2 3], [4 5 6])
ans = 32
```

:::{.callout-tip collapse="true" icon="false" title="Lösningsförslag övning 204"}

```octave
# Denna kod sparas i filen dotmul.m

function retval = dotmul(u, v)
  retval = 0;
  for i = 1:length(u)
    retval += u(i) * v(i);
  endfor
endfunction
```

För att de skript som använder `dotmul` ska hitta funktionen måste sökvägen
till filen läggas till. Detta görs på menyn `Edit -> Set Path`.
:::

### Övning 205

Skapa en funktion clock_hands_angles i en separat fil, vilken ska returnera
vinkeln för tim- minut- och sekundvisaren för ett givet klockslag på en analog
klocka. Vinklarna ska returneras som ”standardvinklar” uttryckta i grader i
enhetscirkeln, dvs när t ex minutvisaren står på 3 så motsvarar det
vinkeln 0&deg;, och när den står på 12 så motsvarar det 90&deg;.

Tänk på att alla visares vinklar ändrar sig lite för varje sekund som går.

Körningsexempel (då funktionen anropas med tiden 03:00:00):

```
octave:5> [h_ang m_ang s_ang] = clock_hands_angles(03, 00, 00)
h_ang = 0
m_ang = 90
s_ang = 90
```

Körningsexempel (då funktionen anropas med tiden 13:45:30):

```
octave:6> [h_ang m_ang s_ang] = clock_hands_angles(13, 45, 30)
h_ang = 37.250
m_ang = 177
s_ang = 270
```

:::{.callout-tip collapse="true" icon="false" title="Lösningsförslag övning 205"}

```octave
# Denna kod sparas i filen clock_hands_angles.m

function [hv mv sv] = clock_hands_angles (h, m, s)
  secs = s + 60*m + 3600*h;
  sv = mod(90-6*secs, 360);     # Modulofunktionen ger
  # Min.visare: 6° på 60 sek.   # vinkeln i det "första"
  mv = mod(90-1/10*secs, 360);  # varvet.
  # Timvisare: 30° på 3600 sek.
  hv = mod(90-1/120*secs, 360);
endfunction
```
:::


### Övning 206

I spelet LOTTO slumpas sju olika nummer bland heltalen 1, 2, 3,. . . , 35.
Spelaren ska gissa vilka nummer som kommer att slumpas fram och hoppas förstås
att få alla rätt (vilket brukar rendera en vinst runt 1 miljon kronor).

Du ska skapa ett skript, `lotto`, som slumpar fram en spelares rad. Skriptet
ska i sin tur anropa en funktion `lottoeval` som ska slumpa fram en vinstrad
och utvärdera spelarens rad med avseende på vilka nummer som är rätt och
dessutom räkna antalet rätt. Körningsexempel (observera att talen är justerade
under varandra):

```
octave:7> lotto
Tippad rad:        5  11  13  15  20  33  34
Vinnande rad:      4  13  16  17  19  25  34
Matchande nummer: 13  34
Antal rätt:        2
```

Inga utskrifter ska göras från funktionen `lottoeval`, dessa ska göras från
skriptet `lotto`. Funktionen `lottoeval` måste alltså returnera det som behövs
för utskrift.

Tips: använd funktionen `randperm`, t ex skapar `randperm(35, 7)`
en vektor med sju slumpade heltal mellan 1 och 35.

:::{.callout-tip collapse="true" icon="false" title="Lösningsförslag övning 206"}

```octave
# Denna kod sparas i filen lottoeval.m

function [correct_nums result matches] = lottoeval(guesses)
  # Inparameter:   guesses, en vektor med spelarens sju gissade nummer
  # Utdata:
     # correct_nums: vektorn som spelarens rad ska utvärderas mot (dragen rad)
     # result:       antalet rätta gissningar (ett tal)
     # matches:      vektor med de korrekta gissningarna

  correct_guesses = 0;
  correct_nums = sort(randperm(35, 7));
  matches = [];

  # Spelarens rad jämförs mot den dragna raden i en nästlad loop
  for i = 1:7;
    for j = 1:7;
      if guesses(i) == correct_nums(j);
        correct_guesses += 1;
        matches(end+1) = guesses(i);
      endif;
    endfor;
  endfor;
  result = correct_guesses;
endfunction
```

Nedan följer skriptet `lotto`:

```octave
# Koden sparas under valfritt filnamn

# Raden som spelaren tippar slumpas fram
tippad_rad = randperm(35, 7);

# Den tippade raden rättas
[dragen_rad antal_ratt matchningar] = lottoeval(tippad_rad);

# Strängar för utskrift skapas
f = sprintf('%3.d ', sort(tippad_rad));
g = sprintf('%3.d ', sort(dragen_rad));
h = sprintf('%3.f ', sort(matchningar));

# Strängarna skrivs ut
printf('Tippad rad:      %s\n', f);
printf('Vinnande rad:    %s\n', g);
printf('Matchande nummer:%s\n', h);
printf('Antal rätt:        %d\n', antal_ratt);
```
:::

### Övning 207

Skriv en funktion `lottovinst` som använder funktionen `lottoeval` från övning
[206](#vning-206). Funktionen `lottovinst` ska slumpa fram en tippad LOTTO-rad
och köra den upprepade gånger i `lottoeval` tills ett minsta antal rätt uppnås
på den tippade raden. Funktionen `lottovinst` ska ta emot parametern
`minst_antal_ratt`, som förstås anger efter hur många rätt på en dragning som
körningen ska stoppas efter.

Körningsexempel, då lottovinst anropas från *Command Window* och vi önskar
minst två rätt:

```
octave:8> lottovinst(2)
antal_dragningar = 4
antal_ratt = 3
```

Här behövde fyra dragningar göras innan det blev minst två rätt (och då blev
det tre rätt).

Körningsexempel då ett större antal rätt önskas:

```
octave:9> lottovinst(6)
antal_dragningar = 15742
antal_ratt = 6
```

Det här anropet, där minst sex rätt önskades, tog 11.3 sekunder för att
uppfylla önskemålet.

Tiden att köra klart funktionen kan mätas med funktionerna `tic` och `toc`
enligt

```
octave:10> tic; lottovinst(5); toc
antal_dragningar = 1331
antal_ratt = 5
Elapsed time is 0.948647 seconds.
```

:::{.callout-tip collapse="true" icon="false" title="Lösningsförslag övning 207"}

```octave
# Denna kod sparas i filen lottovinst.m

function lottovinst(minst_antal_ratt)
  # Här skapas en rad som ska tippas gång på gång tills antalet
  # rätt uppgår till parametervärdet minst_antal_ratt
  tippad_rad = randperm(35, 7);

  # Den tippade raden rättas
  [dragen_rad antal_ratt matchningar] = lottoeval(tippad_rad);

  antal_dragningar = 1;

  # Om inte tillräckligt antal rätt erhålls, tippa samma rad igen och rätta
  # mot en ny dragen rad
  while (antal_ratt < minst_antal_ratt)
    antal_dragningar += 1;
    [dragen_rad antal_ratt matchningar] = lottoeval(tippad_rad);
  endwhile

  # Här sker utskriften av resultatet
  antal_dragningar, antal_ratt 
endfunction
```

Nu kan `lottovinst` anropas antingen från ett skript eller från
*Command Window*.
:::